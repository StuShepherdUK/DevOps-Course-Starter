name: Continuous Integration
on:
  push:
    paths-ignore:
      - '**.md'
  pull_request:
    paths-ignore:
      - '**.md'

env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}

jobs:
  build_and_test_docker:
    name: Build and test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Build the docker image
      run: docker build --target test --tag todo-app:test .

    - name: Run the docker test image
      run:  docker run -p 5000:5000 --env-file .env.test todo-app:test





  push_docker_to_prod:
    name: Push To Production
    runs-on: ubuntu-latest
    needs: build_and_test_docker
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Docker Login
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - uses: actions/checkout@v4

    - name: Build the production docker image
      run: docker build --target production --tag stushepherd181/my-todo-app:latest .
  
    - name: Run the docker test image
      run:  docker push stushepherd181/my-todo-app:latest

    - name: Trigger Azure Webhook to update site
      run: curl -dH -X POST '${{ secrets.AZURE_WEBHOOK }}'

  init_and_apply_infrastructure:
    name: Terraform Init and Apply
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - uses: hashicorp/setup-terraform@v3

    # Initialize Terraform with an Azure storage account to store the Terraform State
    - name: Terraform Init
      id: init
      run: terraform init


    # Run Terraform plan for pull requests only
    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color -var OAUTH_CLIENT="${{ secrets.TF_VAR_OAUTH_CLIENT }}" -var OAUTH_SECRET="${{ secrets.TF_VAR_OAUTH_SECRET }}" -var SECRET_KEY="${{ secrets.TF_VAR_SECRET_KEY }}" -var AZURE_SUBSCRIPTION="${{ vars.TF_VAR_AZURE_SUBSCRIPTION }}"n-var AZURE_RESOURCE_GROUP="${{ vars.TF_VAR_AZURE_RESOURCE_GROUP }}" -var APP_SERVICE_PLAN_NAME="${{ vars.TF_VAR_APP_SERVICE_PLAN_NAME }}" -var APP_SERVICE_PLAN_OS="${{ vars.TF_VAR_APP_SERVICE_PLAN_OS }}" -var APP_SERVICE_PLAN_SKU="${{ vars.TF_VAR_APP_SERVICE_PLAN_SKU }}" -var WEB_APP_NAME="${{ vars.TF_VAR_WEB_APP_NAME }}" -var DOCKER_IMAGE_NAME="${{ vars.TF_VAR_DOCKER_IMAGE_NAME }}" -var DOCKER_REGISTRY_URL="${{ vars.TF_VAR_DOCKER_REGISTRY_URL }}" -var FLASK_APP="${{ vars.TF_VAR_FLASK_APP }}" -var FLASK_DEBUG="${{ vars.TF_VAR_FLASK_DEBUG }}" -var WEBSITE_ENABLE_APP_SERVICE_STORAGE="${{ vars.TF_VAR_WEBSITE_ENABLE_APP_SERVICE_STORAGE }}" -var WEBSITE_PORT="${{ vars.TF_VAR_WEBSITE_PORT }}" -var COSMOSDB_ACCOUNT_NAME="${{ vars.TF_VAR_COSMOSDB_ACCOUNT_NAME }}" -var COSMOSDB_COLLECTION_NAME="${{ vars.TF_VAR_COSMOSDB_COLLECTION_NAME }}" -var COSMOSDB_TABLE_NAME="${{ vars.TF_VAR_COSMOSDB_TABLE_NAME }}"
            




  #   # Run Terraform apply for push to the main branch
  #   # - name: Terraform Apply
  #   ## #  if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   #   run: terraform apply -auto-approve